name: Build and Package Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            artifact_path: dist/windows/my_app-windows.zip
            asset_name: main-windows
          - os: macos-latest
            artifact_path: archive/macos/my_app-macos.tar
            asset_name: main-macos
          - os: ubuntu-latest
            artifact_path: archive/linux/my_app-linux.tar
            asset_name: main-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || pip install pyinstaller selenium webdriver-manager beautifulsoup4 requests pillow lxml tenacity openpyxl

      - name: Install zip for Windows
        if: runner.os == 'Windows'
        run: choco install zip

      - name: Package Application
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            pyinstaller --onedir --name my_app-windows --distpath dist/windows main.py
            cd dist/windows 
            zip -r ../../${{ matrix.artifact_path }} ./my_app-windows/
            cd ../..
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            pyinstaller --onedir --name my_app-macos --distpath dist/macos main.py --hidden-import=PySide2
            mkdir -p archive/macos
            tar -czf ${{ matrix.artifact_path }} -C dist/macos my_app-macos/
          else
            pyinstaller --onedir --name my_app-linux --distpath dist/linux main.py
            mkdir -p archive/linux
            tar -czf ${{ matrix.artifact_path }} -C dist/linux my_app-linux/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifact
          path: ${{ matrix.artifact_path }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # 只在 main 分支推送時創建發布
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate version number
        id: version
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          VERSION="v$(date +'%Y.%m.%d').${COMMIT_COUNT}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/windows-latest-artifact/my_app-windows.zip
            artifacts/macos-latest-artifact/my_app-macos.tar
            artifacts/ubuntu-latest-artifact/my_app-linux.tar
          fail_on_unmatched_files: true